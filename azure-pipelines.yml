strategy:
  matrix:
    # Versions from https://godoc.org/golang.org/dl
    # linux-go1.11.5:
    #   imageName: 'ubuntu-16.04'
    #   goVersion: go1.11.5
    # linux-go1.12.1:
    #   imageName: 'ubuntu-16.04'
    #   goVersion: go1.12.1
    # linux-gotip:
    #   imageName: 'ubuntu-16.04'
    #   goVersion: gotip
    # mac:
    #   imageName: 'macos-10.13'
    #   goVersion: go1.12.1
    windows:
      imageName: 'vs2017-win2016'
      goVersion: go1.12.1

pool:
  vmImage: '$(imageName)'

variables:
  GOROOT: '' # Image seems to have GOROOT set by default :(
  GOPATH: '$(system.defaultWorkingDirectory)/go'
  GO111MODULE: 'off' # TODO: create go.mod
  binPath: '$(system.defaultWorkingDirectory)/bin'
  modulePath: '$(GOPATH)/src/pack.ag/amqp' # Path to the module's code

steps:
- bash: |
    mkdir -p '$(modulePath)'
    shopt -s extglob
    mv !(go|bin) '$(modulePath)'
    echo "##vso[task.prependpath]$(go env GOPATH)/bin"
  displayName: 'Set up the Go workspace'

- bash: |
    go get -u -v golang.org/dl/$(goVersion)
    $(goVersion) download
    mkdir -p "$(binPath)"
    ln -s "$(go env GOPATH)/bin/$(goVersion)" "$(binPath)/go"
    echo "##vso[task.prependpath]$(binPath)"
    go version
  displayName: "Install $(goVersion)"

- bash: |
    which go
    go version
    go env
    go get -v github.com/mattn/goveralls
    go get -v golang.org/x/tools/cmd/cover
  displayName: 'Download coverage tools'

- script: |
    pwd
    go get -t -v -d -tags "integration gofuzz" .
  workingDirectory: '$(modulePath)'
  displayName: 'Download test dependencies'

- script: |
    make ci
  workingDirectory: '$(modulePath)'
  env:
    AZURE_SUBSCRIPTION_ID: $(azureSubscriptionID)
    AZURE_RESOURCE_GROUP: $(azureResourceGroup)
    AZURE_TENANT_ID: $(azureTenantID)
    AZURE_CLIENT_ID: $(azureClientID)
    AZURE_CLIENT_SECRET: $(azureClientSecret)
    SERVICEBUS_NAMESPACE: $(servicebusNamespace)
    SERVICEBUS_ACCESS_KEY_NAME: $(servicebusAccessKeyName)
    SERVICEBUS_ACCESS_KEY: $(servicebusAccessKey)
    EVENTHUB_NAMESPACE: $(eventhubNamespace)
    EVENTHUB_ACCESS_KEY_NAME: $(eventhubAccessKeyName)
    EVENTHUB_ACCESS_KEY: $(eventhubAccessKey)
  displayName: 'Run tests'

- script: |
    goveralls -coverprofile=cover.out -service=travis-ci
  workingDirectory: '$(modulePath)'
  env:
    COVERALLS_TOKEN: $(coverallsToken)
  displayName: 'Upload coverage profile to Coveralls'
